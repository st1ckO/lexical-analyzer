Token Value          Token Type          
========================================
let                  KEYWORD_LET         
sum                  IDENTIFIER          
;                    SEMICOLON           
let                  KEYWORD_LET         
x                    IDENTIFIER          
=                    ASSIGN_OP           
7                    INTEGER             
;                    SEMICOLON           
let                  KEYWORD_LET         
circle_area          IDENTIFIER          
=                    ASSIGN_OP           
pi                   CONST_PI            
*                    MULT_OP             
x                    IDENTIFIER          
^                    POW_OP              
2                    INTEGER             
;                    SEMICOLON           
input                KEYWORD_INPUT       
(                    OPEN_PAREN          
foo                  IDENTIFIER          
)                    CLOSE_PAREN         
;                    SEMICOLON           
print                KEYWORD_PRINT       
(                    OPEN_PAREN          
foo                  IDENTIFIER          
)                    CLOSE_PAREN         
;                    SEMICOLON           
print                KEYWORD_PRINT       
(                    OPEN_PAREN          
"Hello World!"       STRING_LITERAL      
)                    CLOSE_PAREN         
;                    SEMICOLON           
L                    UNIT_LITER          
=                    ASSIGN_OP           
7                    INTEGER             
cm                   IDENTIFIER          
L                    UNIT_LITER          
+=                   ADD_ASSIGN_OP       
2                    INTEGER             
in                   UNIT_INCH           
r_pm                 IDENTIFIER          
=                    ASSIGN_OP           
(                    OPEN_PAREN          
L                    UNIT_LITER          
+                    PLUS_OP             
W                    INVALID_IDENTIFIER  
)                    CLOSE_PAREN         
*                    MULT_OP             
2                    INTEGER             
bar                  IDENTIFIER          
=                    ASSIGN_OP           
sqrt                 IDENTIFIER          
(                    OPEN_PAREN          
sum                  IDENTIFIER          
)                    CLOSE_PAREN         
if                   KEYWORD_IF          
(                    OPEN_PAREN          
area                 IDENTIFIER          
>                    GRT_OP              
5000                 INTEGER             
m2                   UNIT_SQM            
)                    CLOSE_PAREN         
{                    OPEN_BRACE          
if                   KEYWORD_IF          
(                    OPEN_PAREN          
elevation            IDENTIFIER          
>                    GRT_OP              
2000                 INTEGER             
m                    UNIT_METER          
)                    CLOSE_PAREN         
{                    OPEN_BRACE          
print                KEYWORD_PRINT       
(                    OPEN_PAREN          
"Large and high-altitude area" STRING_LITERAL      
)                    CLOSE_PAREN         
;                    SEMICOLON           
}                    CLOSE_BRACE         
else                 KEYWORD_ELSE        
{                    OPEN_BRACE          
print                KEYWORD_PRINT       
(                    OPEN_PAREN          
"Large but low-altitude area" STRING_LITERAL      
)                    CLOSE_PAREN         
;                    SEMICOLON           
}                    CLOSE_BRACE         
}                    CLOSE_BRACE         
else                 KEYWORD_ELSE        
{                    OPEN_BRACE          
print                KEYWORD_PRINT       
(                    OPEN_PAREN          
"Small area"         STRING_LITERAL      
)                    CLOSE_PAREN         
;                    SEMICOLON           
}                    CLOSE_BRACE         
if                   KEYWORD_IF          
(                    OPEN_PAREN          
distance             IDENTIFIER          
>                    GRT_OP              
5                    INTEGER             
mi                   IDENTIFIER          
)                    CLOSE_PAREN         
{                    OPEN_BRACE          
if                   KEYWORD_IF          
(                    OPEN_PAREN          
elapsedTime          IDENTIFIER          
<                    LST_OP              
2                    INTEGER             
hr                   UNIT_HOUR           
)                    CLOSE_PAREN         
{                    OPEN_BRACE          
print                KEYWORD_PRINT       
(                    OPEN_PAREN          
"Speed is fast"      STRING_LITERAL      
)                    CLOSE_PAREN         
;                    SEMICOLON           
}                    CLOSE_BRACE         
else                 KEYWORD_ELSE        
{                    OPEN_BRACE          
print                KEYWORD_PRINT       
(                    OPEN_PAREN          
"Speed is average"   STRING_LITERAL      
)                    CLOSE_PAREN         
;                    SEMICOLON           
}                    CLOSE_BRACE         
}                    CLOSE_BRACE         
else                 KEYWORD_ELSE        
{                    OPEN_BRACE          
print                KEYWORD_PRINT       
(                    OPEN_PAREN          
"Distance is too short" STRING_LITERAL      
)                    CLOSE_PAREN         
;                    SEMICOLON           
}                    CLOSE_BRACE         
